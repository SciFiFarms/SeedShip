# This is an unbranded-water-supply-mixer.yaml template. 
substitutions:
  #debug: !debug
  <<: !include templates/generated_substitutions.yaml

script:
  - id: pump_system
    then:
      - logger.log: "Starting Pump System"
      - lambda: |-
          id(water).dose();
      - wait_until:
          switch.is_off: water
      - lambda: |-
          id(discharge).dose();
      - wait_until:
          switch.is_off: discharge
      - lambda: |-
          id(water_line).dose();

switch:
  # Relay 1
  # Peristaltic Pump
  - platform: dosage
    name: "${system_friendly} Water"
    command_topic: seedship/${system}/water
    pin: 
      number: GPIO15
      mode: OUTPUT
    id: water
    restore_mode: ALWAYS_OFF
    dosage: 20min

  # Relay 2
  # Solenoid. 
  - platform: dosage
    name: "${system_friendly} Discharge"
    command_topic: seedship/${system}/${subsystem}_discharge
    pin: 
      number: GPIO5
      mode: OUTPUT
    id: discharge
    restore_mode: ALWAYS_OFF
    dosage: 15s

  # Relay 3
  # Solenoid. 
  - platform: dosage
    name: "${system_friendly} Water Line"
    command_topic: seedship/${system}/water_line
    pin: 
      number: GPIO14
      mode: OUTPUT
    id: water_line
    restore_mode: ALWAYS_OFF
    dosage: 10 min

  # Relay 4
  - platform: gpio
    name: "${system_friendly} ${subsystem_friendly} RO Pump"
    command_topic: seedship/${system}/${subsystem}_ro_pump
    pin: 
      number: GPIO12
    id: ro_pump
    restore_mode: ALWAYS_ON
    #dosage: 60s

  # Relay USB
  - platform: gpio
    name: "${system_friendly} ${subsystem_friendly} Esp32 Power"
    command_topic: seedship/${system}/${subsystem}_esp32_power
    pin: GPIO4
    id: esp32_power
    restore_mode: ALWAYS_ON

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO13
      mode: INPUT_PULLUP
      inverted: True
    name: "${system_friendly} ${subsystem_friendly} Button"
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at most 0.3s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - logger.log: "Double-Clicked"
          - if:
              condition:
                - script.is_running: fertigate_strawberries
              then:
                - logger.log: Already mixing strawberry food. Canceling job.
                - script.stop: fertigate_strawberries
                - lambda: |-
                    id(part_a).cancel_dose();
                    id(part_b).cancel_dose();
                    id(ph).cancel_dose();
                    id(water).cancel_dose();
                    id(mixers).cancel_dose();

      - timing:
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - logger.log: "Single-Clicked"
          - if:
              condition:
                - script.is_running: fertigate_strawberries
              then:
                - logger.log: Already mixing strawberry food. Exiting.
              else:
                - script.execute: fertigate_strawberries

  - platform: status
    name: "${system_friendly} ${subsystem_friendly} Status"

sensor:
  - platform: mqtt_subscribe
    id: strawberry
    topic: seedship/${system}/strawberries
    on_value:
      - if:
          condition:
            - script.is_running: fertigate_strawberries
          then:
            - logger.log: Already mixing strawberry food. Exiting.
          else:
            - logger.log: Fertigating
            - script.execute: fertigate_strawberries


  - !include templates/sensor/seedship_mode.yaml
  - platform: wifi_signal
    name: "${system_friendly} ${subsystem_friendly} WiFi Signal"
    update_interval: 60s
  - platform: uptime
    name: "${system_friendly} ${subsystem_friendly} Uptime"

text_sensor:
  - platform: version
    name: "${system_friendly} ${subsystem_friendly} ESPHome Version"  

status_led:
  pin:
    number: GPIO2

esphome: !include templates/esphome/esp01_1m.yaml
wifi: !include secrets/wifi.yaml
mqtt: !include templates/mqtt/mqtt.yaml
logger:
ota:
