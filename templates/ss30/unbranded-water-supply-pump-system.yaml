# This is an unbranded-water-supply-mixer.yaml template. 
substitutions:
  #debug: !debug
  <<: !include templates/generated_substitutions.yaml

script:
  - id: pump_system
    then:
      - logger.log: "Starting Pump System"
      - switch.turn_off: water_line
      - lambda: |-
          id(water).dose();
      - delay: 2 min
      - lambda: |-
          id(discharge).dose();
      - wait_until:
          switch.is_off: water
      - lambda: |-
          id(water_line).dose_for_seconds(600);
      - delay: 10min

switch:
  # Relay 1
  # Peristaltic Pump
  - platform: dosage
    name: "${system_friendly} Water"
    command_topic: seedship/${system}/water
    pin: 
      number: GPIO15
      mode: OUTPUT
    id: water
    restore_mode: ALWAYS_OFF
    dosage: 30min

  # Relay 2
  # Solenoid. 
  - platform: dosage
    name: "${system_friendly} Discharge"
    command_topic: seedship/${system}/${subsystem}_discharge
    pin: 
      number: GPIO5
      mode: OUTPUT
    id: discharge
    restore_mode: ALWAYS_OFF
    dosage: 15s

  # Relay 3
  # Solenoid. 
  - platform: dosage
    name: "${system_friendly} Water Line"
    command_topic: seedship/${system}/water_line
    pin: 
      number: GPIO14
      mode: OUTPUT
    id: water_line
    restore_mode: ALWAYS_OFF
    dosage: 30s

  # Relay 4
  - platform: gpio
    name: "${system_friendly} RO Pump"
    command_topic: seedship/${system}/ro_pump
    pin: 
      number: GPIO12
    id: ro_pump
    restore_mode: ALWAYS_ON
    #dosage: 60s

  # Relay USB
  - platform: gpio
    name: "${system_friendly} ${subsystem_friendly} Esp32 Power"
    command_topic: seedship/${system}/${subsystem}_esp32_power
    pin: GPIO4
    id: esp32_power
    restore_mode: ALWAYS_ON

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO13
      mode: INPUT_PULLUP
      inverted: True
    name: "${system_friendly} ${subsystem_friendly} Button"
    on_multi_click:
      - timing: 
          - ON for at least 3s
        then:
          - if:
              condition: 
                - lambda: |-
                    return id(mode).state == $MODE_MANUAL_OVERRIDE;
              then:
                - lambda: |-
                    id(mode).publish_state($MODE_RUNNING);
              else:
                - lambda: |-
                    id(mode).publish_state($MODE_MANUAL_OVERRIDE);

      - timing:
          - ON for at most 1s
          - OFF for at most 0.3s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - logger.log: "Double-Clicked"
          - if:
              condition:
                - lambda: |-
                    return id(mode).state == $MODE_RUNNING;
              then:
                - if: 
                    condition:
                      - script.is_running: pump_system
                    then:
                      - logger.log: Already pumping water. Canceling job.
                      - script.stop: pump_system
                      - lambda: |-
                          id(water).cancel_dose();
                          id(discharge).cancel_dose();
                          id(water_line).cancel_dose();
                    else:
                      - script.execute: pump_system

      - timing:
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - logger.log: "Single-Clicked"
          - switch.turn_off: water_line
          - lambda: |-
              id(discharge).dose();

  - platform: status
    name: "${system_friendly} ${subsystem_friendly} Status"

sensor:
  - platform: mqtt_subscribe
    id: ${system}_bus_psi
    topic: seedship/${system}/bus_psi
    on_value:
      - if: 
          condition:
              and:
                  - sensor.in_range:
                      id: ${system}_bus_psi
                      below: 80
                  - sensor.in_range:
                      id: ${system}_pump_psi
                      above: 75
                  - switch.is_off: water_line
                  - switch.is_off: water
                  - lambda: |-
                      return id(mode).state == $MODE_RUNNING;
                  - mqtt.connected:
          then:
            - lambda: 
                id(water_line).dose();

  - platform: mqtt_subscribe
    id: ${system}_pump_psi
    topic: seedship/${system}/pump_psi
    on_value:
      - if: 
          condition:
              and:
                  - sensor.in_range:
                      id: ${system}_pump_psi
                      below: 60
                  - not: 
                      script.is_running: pump_system
                  - lambda: |-
                      return id(mode).state == $MODE_RUNNING;
                  - mqtt.connected:
          then:
            - mqtt.publish:
                topic: seedship/${system}/strawberries
                payload: 1

  - platform: mqtt_subscribe
    id: strawberry
    topic: seedship/${system}/strawberries
    on_value:
      - if:
          condition:
            - script.is_running: pump_system
          then:
            - logger.log: Already pumping water. Exiting.
          else:
            - logger.log: Running pump_system
            - script.execute: pump_system

  - !include templates/sensor/seedship_mode.yaml
  - platform: wifi_signal
    name: "${system_friendly} ${subsystem_friendly} WiFi Signal"
    update_interval: 60s
  - platform: uptime
    name: "${system_friendly} ${subsystem_friendly} Uptime"

text_sensor:
  - platform: version
    name: "${system_friendly} ${subsystem_friendly} ESPHome Version"  

status_led:
  pin:
    number: GPIO2

esphome: !include templates/esphome/esp01_1m.yaml
wifi: !include secrets/wifi.yaml
mqtt: !include templates/mqtt/mqtt.yaml
logger:
ota:
