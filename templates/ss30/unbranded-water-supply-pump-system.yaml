# This is an unbranded-water-supply-mixer.yaml template. 
substitutions:
  #debug: !debug
  <<: !include templates/generated_substitutions.yaml

script:
  - id: pump_system
    then:
      - logger.log: "Starting Pump System"
      - delay: 10s
      - lambda: |-
          // START HERE: Seems like I should make a dose action? 
          // More than anything, I need to come up with a way to cancel a dose. 

          // TODO: This may need to be split into individual scripts that get waited for. 
          id(mixers).dose();
          id(water).dose();
          id(part_a).dose();
      - delay: 120s
      - lambda: |-
          id(part_b).dose();
      - delay: 120s
      - lambda: |-
          id(ph).dose();
      - delay: 120s
      - lambda: |-
          //# TODO: Have dose take an optional 0.0-1.0 value that scales the does?-
          id(water).dose();
          //# Confirm that the Ph/EC is correct.
          //# MQTT message that results in mixing bucket emptying into supply 
          //#     And cycling out air. 

switch:
  # Relay 1
  - platform: dosage
    name: "${system_friendly} ${subsystem_friendly} Part A"
    command_topic: seedship/${system}/${subsystem}_part_a
    pin: GPIO15
    id: part_a
    exact_timing: true
    dosage: 5s

  # Relay 2
  - platform: dosage
    name: "${system_friendly} Part B"
    command_topic: seedship/${system}/${subsystem}_part_b
    pin: GPIO5
    id: part_b
    exact_timing: true
    dosage: 5s

  # Relay 3
  - platform: dosage
    name: "${system_friendly} ${subsystem_friendly} PH"
    command_topic: seedship/${system}/${subsystem}_ph
    pin: GPIO14
    id: ph
    exact_timing: true
    dosage: 5s

  # Relay 4
  - platform: dosage
    name: "${system_friendly} ${subsystem_friendly} Water"
    command_topic: seedship/${system}/${subsystem}_water
    pin: GPIO12
    id: water
    dosage: 60s

  # Relay USB
  - platform: dosage
    name: "${system_friendly} ${subsystem_friendly} Mixers"
    command_topic: seedship/${system}/${subsystem}_mixers
    pin: GPIO4
    id: mixers
    dosage: 600s

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO13
      mode: INPUT_PULLUP
      inverted: True
    name: "${system_friendly} ${subsystem_friendly} Button"
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at most 0.3s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - logger.log: "Double-Clicked"
          - if:
              condition:
                - script.is_running: fertigate_strawberries
              then:
                - logger.log: Already mixing strawberry food. Canceling job.
                - script.stop: fertigate_strawberries
                - lambda: |-
                    id(part_a).cancel_dose();
                    id(part_b).cancel_dose();
                    id(ph).cancel_dose();
                    id(water).cancel_dose();
                    id(mixers).cancel_dose();

      - timing:
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - logger.log: "Single-Clicked"
          - if:
              condition:
                - script.is_running: fertigate_strawberries
              then:
                - logger.log: Already mixing strawberry food. Exiting.
              else:
                - script.execute: fertigate_strawberries

  - platform: status
    name: "${system_friendly} ${subsystem_friendly} Status"

sensor:
  - platform: mqtt_subscribe
    id: strawberry
    topic: seedship/${system}/strawberries
    on_value:
      - if:
          condition:
            - script.is_running: fertigate_strawberries
          then:
            - logger.log: Already mixing strawberry food. Exiting.
          else:
            - logger.log: Fertigating
            - script.execute: fertigate_strawberries

  #- platform: template
  #  id: my_output
  #  #type: float
  #  update_interval: 15s
  #  lambda: 'return 42.0;'
  #  force_update: true
  #  on_value:
  #    then:
  #      - if:
  #          condition:
  #            - script.is_running: fertigate_strawberries
  #          then:
  #            - logger.log: Already mixing strawberry food. Exiting.
  #          else:
  #            - logger.log: Fertigating
  #            - script.execute: fertigate_strawberries
        #- logger.log: Already mixing strawberry food. Exiting.
        #- script.execute: fertigate_strawberries

  #- platform: mqtt_subscribe
  #  id: ${subsystem}_psi
  #  topic: seedship/${system}/${subsystem}_psi
  #  on_value:
  #    then:
  #      - if:
  #          condition:
  #            and:
  #                - sensor.in_range:
  #                    id: ${subsystem}_psi
  #                    below: 70
  #                - switch.is_off: water_intake
  #                - mqtt.connected:
  #          then:
  #            - switch.turn_on: water_intake
  #            - delay: 3min
  #            - switch.turn_off: water_intake

  #- !include templates/sensor/seedship_mode.yaml
  - platform: wifi_signal
    name: "${system_friendly} ${subsystem_friendly} WiFi Signal"
    update_interval: 60s
  - platform: uptime
    name: "${system_friendly} ${subsystem_friendly} Uptime"

#time:
#  #The below code ***Should*** turn on the nozzles every 10 minutes for 10 seconds. https://esphome.io/components/time.html?highlight=time#on-time for code that I used. 
#  - platform: sntp
#    #id: time
#    # TODO: This should be read from an env var.
#    timezone: America/Denver
#    on_time:
#      - seconds: 0
#        minutes: /5
#        then: 
#          - delay: $delay
#          - lambda: |-
#              id(nozzles).dose();

text_sensor:
  - platform: version
    name: "${system_friendly} ${subsystem_friendly} ESPHome Version"  

status_led:
  pin:
    number: GPIO2

esphome: !include templates/esphome/esp01_1m.yaml
wifi: !include secrets/wifi.yaml
mqtt: !include templates/mqtt/mqtt.yaml
logger:
ota:
