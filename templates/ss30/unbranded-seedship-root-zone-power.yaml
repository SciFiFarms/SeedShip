# This is an unbranded-seedship-root-zone-power.yaml template.
substitutions:
  #debug: !debug
  <<: !include templates/generated_substitutions.yaml

switch:
  # Relay 1
  - platform: dosage
    name: "${system_friendly} ${subsystem_friendly} Water Drainage"
    command_topic: seedship/${system}/${subsystem}_water_drainage
    pin: GPIO15
    id: drainage
    dosage: 10 min

  # Relay 2
  - platform: gpio
    name: "${system_friendly} Shoot Zone Power"
    command_topic: seedship/${system}/${subsystem}_shoot_zone_power
    pin: GPIO5
    #id: co2
    restore_mode: ALWAYS_ON

  # Relay 3
  - platform: gpio
    name: "${system_friendly} ${subsystem_friendly} Air Intake"
    command_topic: seedship/${system}/${subsystem}_air_intake
    pin: GPIO14
    id: air_intake

  # Relay 4
  - platform: dosage
    name: "${system_friendly} ${subsystem_friendly} Water Nozzle"
    command_topic: seedship/${system}/${subsystem}_water_nozzle
    pin: GPIO12
    id: nozzles
    dosage: 5s

  # Relay USB
  - platform: gpio
    name: "${system_friendly} ${subsystem_friendly} USB"
    command_topic: seedship/${system}/${subsystem}_usb
    pin: GPIO4
    id: relay5
    restore_mode: ALWAYS_ON

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO13
      mode: INPUT_PULLUP
      inverted: True
    name: "${system_friendly} ${subsystem_friendly} Button"
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at most 0.3s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - logger.log: "Double-Clicked"
          - script.execute: drain
      - timing:
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - logger.log: "Single-Clicked"
          - lambda: |-
              id(nozzles).dose();

  - platform: status
    name: "${system_friendly} ${subsystem_friendly} Status"

script:
  - id: drain
    then:
      - mqtt.publish:
          topic: seedship/drainage/request_access
          payload: ${system}_${subsystem}
      - delay: 30 s
      - wait_until:
          switch.is_off: drainage

sensor:
  - !include templates/sensor/seedship_mode_internal.yaml
  - platform: wifi_signal
    name: "${system_friendly} ${subsystem_friendly} WiFi Signal"
    update_interval: 60s
  - platform: uptime
    name: "${system_friendly} ${subsystem_friendly} Uptime"

time:
  #The below code ***Should*** turn on the nozzles every 10 minutes for 10 seconds. https://esphome.io/components/time.html?highlight=time#on-time for code that I used.
  - platform: sntp
    #id: time
    # TODO: This should be read from an env var.
    timezone: America/Denver
    on_time:
      # Mist Roots
      - seconds: 0
        minutes: /5
        then:
          - delay: $delay
          - lambda: |-
              id(nozzles).dose();

      # Drain Root zone
      - seconds: 0
        minutes: 2
        hours: /3
        then:
          - delay: $long_delay
          - script.execute: drain

text_sensor:
  - platform: mqtt_subscribe
    #name: "Data from topic"
    id: drainage_bus
    topic: seedship/drainage/owner
    on_value:
      - if:
          condition:
            text_sensor.state:
              id: drainage_bus
              state: ${system}_${subsystem}
          then:
            - lambda: !lambda
                id(drainage).dose();
            - wait_until:
                switch.is_off: drainage
            #- delay: !lambda
            #    return id(drainage).get_dosage();
            - mqtt.publish:
                topic: seedship/drainage/owner
                payload: "idle"

  - platform: version
    name: "${system_friendly} ${subsystem_friendly} ESPHome Version"

status_led:
  pin:
    number: GPIO2

esphome: !include templates/esphome/esp01_1m.yaml
wifi: !include secrets/wifi.yaml
mqtt: !include templates/mqtt/mqtt.yaml
logger:
ota:
