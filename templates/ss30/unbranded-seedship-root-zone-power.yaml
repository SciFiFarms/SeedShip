# This is an unbranded-seedship-root-zone-power.yaml template.
substitutions:
  #debug: !debug
  <<: !include templates/generated_substitutions.yaml

switch:
  # Relay 1
  - platform: dosage
    name: "${system_friendly} ${subsystem_friendly} Water Drainage"
    command_topic: seedship/${system}/${subsystem}_water_drainage
    pin: GPIO15
    id: drainage
    dosage: 10 min

  # Relay 2
  - platform: gpio
    name: "${system_friendly} Shoot Zone Power"
    command_topic: seedship/${system}/${subsystem}_shoot_zone_power
    pin: GPIO5
    #id: co2
    restore_mode: ALWAYS_ON

  # Relay 3
  - platform: gpio
    name: "${system_friendly} ${subsystem_friendly} Air Intake"
    command_topic: seedship/${system}/${subsystem}_air_intake
    pin: GPIO14
    id: air_intake

  # Relay 4
  - platform: dosage
    name: "${system_friendly} ${subsystem_friendly} Water Nozzle"
    command_topic: seedship/${system}/${subsystem}_water_nozzle
    pin: GPIO12
    id: nozzles
    dosage: 5s

  # Relay USB
  - platform: gpio
    name: "${system_friendly} ${subsystem_friendly} USB"
    command_topic: seedship/${system}/${subsystem}_usb
    pin: GPIO4
    id: relay5
    restore_mode: ALWAYS_ON

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO13
      mode: INPUT_PULLUP
      inverted: True
    name: "${system_friendly} ${subsystem_friendly} Button"
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at most 0.3s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - logger.log: "Double-Clicked"
          - script.execute: drain
      - timing:
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - logger.log: "Single-Clicked"
          - lambda: |-
              id(nozzles).dose();

  - platform: status
    name: "${system_friendly} ${subsystem_friendly} Status"

script:
  - id: drain
    then:
      - mqtt.publish:
          topic: seedship/${water_supply}/drainage_bus_request_access
          payload: ${system}_${subsystem}
      - delay: 30 s
      - wait_until:
          switch.is_off: drainage

  - id: calibrate_clogged_nozzle_detection
    then:
      - delay: $delay
      - mqtt.publish:
          topic: seedship/${water_supply}/bus_request_access
          payload: ${system}_${subsystem}
      - wait_until:
          condition:
            text_sensor.state:
              id: bus
              state: ${system}_${subsystem}
      - lambda: |-
          id(pre_psi) = id(bus_psi).state;
          id(nozzles).dose();
      - delay: 5s
      - lambda: |-
          float post_psi = id(bus_psi).state;

          if (post_psi - id(pre_psi) < id(current_clogged_nozzle_value).state - (id(current_clogged_nozzle_value).state * 0.2))
          {
            id(mqtt_client).publish("seedship/${water_supply}/warnings", "Warning! Nozzles for ${system} appear to be clogged.");
          }
      - delay: 10s
      - mqtt.publish:
          topic: seedship/${water_supply}/bus_owner
          payload: "idle"

  - id: request_spray
    then:
      - mqtt.publish:
          topic: seedship/${water_supply}/bus_request_access
          payload: ${system}_${subsystem}

  - id: spray
    then:
      - delay: 5s
      - lambda: |-
          id(pre_psi) = id(bus_psi).state;
          id(nozzles).dose();
      - delay: 1s
      - wait_until:
          switch.is_off: nozzles
      - delay: 5s
      - mqtt.publish:
          topic: seedship/${water_supply}/bus_owner
          payload: "idle"

sensor:
  - !include templates/sensor/seedship_mode_internal.yaml
  - platform: wifi_signal
    name: "${system_friendly} ${subsystem_friendly} WiFi Signal"
    update_interval: 60s
  - platform: uptime
    name: "${system_friendly} ${subsystem_friendly} Uptime"
time:
  - platform: sntp
    #id: time
    # TODO: This should be read from an env var.
    timezone: America/Denver
    on_time:
      # Mist Roots
      - seconds: 0
        minutes: /5
        then:
          - delay: $delay
          - if:
              condition:
                script.is_running: spray
              then:
                # If we don't stop the script, it gets stuck waiting to become the owner.
                script.stop: spray
          - if:
              condition:
                - lambda: |-
                    return id(mode).state == $MODE_RUNNING;
              then:
                - script.execute: request_spray

      # Mist Roots - Emergency mode.
      - seconds: 0
        minutes: /30
        then:
          - delay: $delay
          - if:
              condition:
                script.is_running: spray
              then:
                # If we don't stop the script, it gets stuck waiting to become the owner.
                script.stop: spray
          - if:
              condition:
                - lambda: |-
                    return id(mode).state == $MODE_WATER_SUPPLY_ERROR;
              then:
                - script.execute: request_spray

      # Drain Root zone
      - seconds: 0
        minutes: 2
        hours: /3
        then:
          - delay: $long_delay
          - script.execute: drain

text_sensor:
  - platform: mqtt_subscribe
    name: "${system_friendly} Bus"
    id: bus
    qos: 2
    topic: seedship/${water_supply}/bus_owner
    on_value:
      - if:
          condition:
              - text_sensor.state:
                  id: bus
                  state: ${system}_${subsystem}
          then:
              script.execute: spray
          else:
              - if:
                  condition:
                      - text_sensor.state:
                          id: bus
                          state: "idle"
                      - switch.is_on: nozzles
                  then:
                      - switch.turn_off: nozzles

  - platform: mqtt_subscribe
    #name: "Data from topic"
    id: drainage_bus
    topic: seedship/${water_supply}/drainage_bus_owner
    on_value:
      - if:
          condition:
            text_sensor.state:
              id: drainage_bus
              state: ${system}_${subsystem}
          then:
            - lambda: !lambda
                id(drainage).dose();
            - wait_until:
                switch.is_off: drainage
            #- delay: !lambda
            #    return id(drainage).get_dosage();
            - mqtt.publish:
                topic: seedship/${water_supply}/drainage_bus_owner
                payload: "idle"

  - platform: version
    name: "${system_friendly} ${subsystem_friendly} ESPHome Version"

status_led:
  pin:
    number: GPIO2

esphome: !include templates/esphome/esp01_1m.yaml
wifi: !include secrets/wifi.yaml
mqtt: !include templates/mqtt/mqtt.yaml
logger:
ota:
