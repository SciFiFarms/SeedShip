substitutions:
  <<: !include templates/generated_substitutions.yaml

wifi: !include secrets/wifi.yaml
mqtt: !include templates/mqtt/mqtt.yaml

esphome: 
  name: $device_name 
  platform: ESP32
  board: esp32doit-devkit-v1
  # If it builds in the /config folder like is default, then there arise
  # conflicts between the server and my machine. /tmp/esphome-build is a volume.
  build_path: /tmp/esphome-build/$device_name/
  #arduino_version: 1.0.4
  #includes:
  #  - custom_components/dual_pot/dual_pot.h

text_sensor:
  - platform: mqtt_subscribe
    topic: seedship/${system}/bus_psi_calibration
    name: $system_friendly Bus PSI calibration 
    qos: 1
    on_value:
      then:
        - lambda: |-
            static const char *TAG = "custom_sensor";
            CalibrateLinearFilter* filter = id(bus_psi).get_filter<CalibrateLinearFilter>();

            if(filter == nullptr) {
              ESP_LOGW(TAG, "Could not find filter.");
            } else {
              ESP_LOGV(TAG, "Found filter! %s", typeid (filter).name());
              json::parse_json(x, 
                [filter](JsonObject &root) { 
                    ESP_LOGW(TAG, "JSON PARSED");
                    if (root.containsKey("slope"))
                      filter->set_slope(root["slope"]);
                    if (root.containsKey("bias"))
                      filter->set_bias(root["bias"]);
              });
            }

  - platform: mqtt_subscribe
    topic: seedship/${system}/pump_psi_calibration
    name: $system_friendly Pump PSI calibration 
    qos: 1
    on_value:
      then:
        - lambda: |-
            static const char *TAG = "custom_sensor";
            CalibrateLinearFilter* filter = id(pump_psi).get_filter<CalibrateLinearFilter>();

            if(filter == nullptr) {
              ESP_LOGW(TAG, "Could not find filter.");
            } else {
              ESP_LOGV(TAG, "Found filter! %s", typeid (filter).name());
              json::parse_json(x, 
                [filter](JsonObject &root) { 
                    ESP_LOGW(TAG, "JSON PARSED");
                    if (root.containsKey("slope"))
                      filter->set_slope(root["slope"]);
                    if (root.containsKey("bias"))
                      filter->set_bias(root["bias"]);
              });
            }

sensor:
  - platform: mqtt_subscribe
    name: $system_friendly PSI Manual
    state_topic: seedship/${system}/psi_manual
    topic: seedship/${system}/psi_manual_input
    accuracy_decimals: 2
    unit_of_measurement: "PSI"

  - platform: adc
    pin: GPIO34
    name: $system_friendly Pump PSI
    state_topic: seedship/${system}/pump_psi
    icon: "mdi:water-pump"
    update_interval: 1s
    id: pump_psi
    attenuation: 11db
    expire_after: 60s
    force_update: true
    filters:
      - sliding_window_moving_average:
          window_size: 10
          send_every: 1
      - calibrate_linear:
        # 200 PSI sensor
        - 0.5 -> 0.0
        - 1.14 -> 25.8
        - 1.37 -> 35.8
        - 1.85 -> 55.5
        - 3.09 -> 103.4
        - 3.28 -> 109.2
        ## 300 PSI sensor
        #- 0.5 -> 0.0
        #- 0.89 -> 25.4
        #- 1.35 -> 55
        #- 2.0 -> 93.3
        #- 2.1 -> 103.3
        #- 2.25 -> 110.4
    unit_of_measurement: "PSI"
    on_raw_value:
      then: 
        - sensor.template.publish:
            id: pump_raw_psi
            state: !lambda "return x;"

  - platform: template
    name: $system_friendly Pump PSI Raw 
    accuracy_decimals: 4
    unit_of_measurement: "raw"
    id: pump_raw_psi

#####
  - platform: adc
    pin: GPIO35
    name: $system_friendly Bus PSI
    state_topic: seedship/${system}/bus_psi
    icon: "mdi:water-pump"
    update_interval: 1s
    id: bus_psi
    attenuation: 11db
    expire_after: 60s
    force_update: true
    filters:
      - sliding_window_moving_average:
          window_size: 10
          send_every: 1
      - calibrate_linear:
        # 200 PSI sensor
        - 0.5 -> 0.0
        - 1.14 -> 25.8
        - 1.37 -> 35.8
        - 1.85 -> 55.5
        - 3.09 -> 103.4
        - 3.28 -> 109.2
        ## 300 PSI sensor
        #- 0.5 -> 0.0
        #- 0.89 -> 25.4
        #- 1.35 -> 55
        #- 2.0 -> 93.3
        #- 2.1 -> 103.3
        #- 2.25 -> 110.4
    unit_of_measurement: "PSI"
    on_raw_value:
      - sensor.template.publish:
          id: bus_raw_psi
          state: !lambda "return x;"

  - platform: template
    name: $system_friendly Bus PSI Raw 
    accuracy_decimals: 4
    unit_of_measurement: "raw"
    id: bus_raw_psi


####

# Enable logging
logger:
# Enable Over the Air Updates
ota:
