# This operates under the assumption that you pass in the following:
# MQTT Prefix/topic
# Name of bus
# Script to run when we're the owner

#globals:
#  - id: pre_psi
#    type: float
#    restore_value: no
#    initial_value: '0'
#
#  - id: bus_psi_increasing
#    type: boolean
#    restore_value: no
#    initial_value: "false"

script:
  - id: receive_resource_request
    mode: parallel
    then:
      - lambda: |-
          json::global_json_buffer.clear();
          std::string array_string = id(resource_queue).state;
          JsonArray& array = json::global_json_buffer.parseArray(array_string);

          array.add(id(resource_request).state);

          std::string new_array_string;
          array.printTo(new_array_string);
          ESP_LOGW(TAG, "Array: %s (%d)\n\n", new_array_string.c_str(), array.size());

          id(resource_queue).publish_state(new_array_string.c_str());
      - script.execute: reserve_bus

  - id: reserve_bus
    mode: queued
    then:
      - logger.log: "Changing bus ownership."
      - script.execute: _bus_timeout
      - mqtt.publish:
          topic: seedship/${system}/bus_owner
          # TODO: Make this persist state by setting the value of bus_queue at boot via another sensor subscribed to bus_queue... Maybe persist message?
          payload: !lambda >-
              json::global_json_buffer.clear();
              std::string array_string = id(resource_queue).state;
              JsonArray& array = json::global_json_buffer.parseArray(array_string);

              std::string request = array[0];
              array.remove(0);

              std::string new_array_string;
              array.printTo(new_array_string);
              ESP_LOGW(TAG, "Array: %s (%d)\n\n", new_array_string.c_str(), array.size());

              id(resource_queue).publish_state(new_array_string.c_str());
              return request;
      # Need to allow for the state to actually change.
      - delay: 1 s
      - wait_until:
          condition:
            text_sensor.state:
              id: current_step
              state: "idle"
      - logger.log: "Finished waiting for idle"

      # Clean up the timeout script if it's still running.
      - if:
          condition:
              script.is_running: _resource_timeout
          then:
              script.stop: _resource_timeout

  - id: _resource_timeout
    then:
        - delay:  10 min
        - if:
            condition:
                not:
                  text_sensor.state:
                    id: current_step
                    state: "idle"
            then:
                - mqtt.publish:
                    topic: seedship/${system}/warnings
                    payload: "${system}: Resource timed out; Resetting owner to idle."
                - mqtt.publish:
                    topic: seedship/${system}/current_step
                    payload: "idle"


text_sensor:
  - platform: mqtt_subscribe
    name: "${system_friendly} Bus"
    id: bus
    topic: seedship/${system}/bus_owner

  - platform: mqtt_subscribe
    name: "${system_friendly} Resource Request"
    id: resource_request
    topic: seedship/${system}/request_resource
    on_value:
      - script.execute: receive_resource_request

  - platform: template
    name: ${system_friendly} Resource Queue
    id: resource_queue


esphome:
  on_boot:
    then:
      - script.execute: _resource_timeout
